(define null '())
(define (empty? x) (eq x '())) 
(define (count? xs) (if (empty? xs) 0 (+ 1 (count? (cdr xs))))) 
(define (map f xs) (if (empty? xs) () (cons (f (car xs)) (map f (cdr xs))))) 
(define (filter f xs) (if (empty? xs) () (if (f (car xs)) (cons (car xs) (filter f (cdr xs))) (filter f (cdr xs)))))
(define (nth n xs) (if (eq n 0) (car xs) (nth (- n 1) (cdr xs)))) 
(define (even? n) (eq (mod n 2) 0) ) 
(define (delay exp) (lambda () (exp)))
(define (force exp) (exp))
(define (entry tree) (car tree))
(define (left-branch tree) (car (cdr tree)))
(define (right-branch tree) (car (cdr (cdr tree))))
(define (make-tree key left-child right-child) (list key left-child right-child))
(define (insert-set x set) (cond ((empty? set) (make-tree x '() '())) ((eq x (entry set)) set) ((lt x (entry set)) (make-tree (entry set) (insert-set x (left-branch set)) (right-branch set))) ((gt x (entry set)) (make-tree (entry set) (left-branch set) (insert-set x (right-branch set))))))
(define (set-member? x set) (cond ((empty? set) set) ((lt x (entry set)) (set-member? x (left-branch set))) ((gt x (entry set)) (set-member? x (right-branch set))) (else (eq x (entry set)))))
(define (pre-order set) (if (empty? set) '() ((say (entry set)) (pre-order (left-branch set)) (pre-order (right-branch set)))))
(define (foreach-set f set) (if (empty? set) '() ((foreach-set f (left-branch set)) (f (entry set)) (foreach-set f (right-branch set)))))
