    (do (define fib (& (x) (do (define fib-iter (& (curr prev cnt max) (if (eq cnt max) curr (fib-iter (+ prev curr) curr (+ cnt 1) max)))) (fib-iter 1 1 1 x))))
    (define fact (& (x) (do (define fact-iter (& (prod cnt max) (if (eq cnt max) (* prod cnt) (fact-iter (* prod cnt) (+ 1 cnt) max)))) (fact-iter 1 1 x))))
    (define MUL (& (m n) (if (eq n 0) 0 (+ m (MUL m (- n 1)))))))
    (fib 6)
    (fact 5)
    (do (define root '())
    (set root (adjoin-set 24 root))
    (set root (adjoin-set 13 root))
    (set root (adjoin-set 42 root))
    (set root (adjoin-set 6 root))
    (set root (adjoin-set 11 root))
    (set root (adjoin-set 101 root))
    (set root (adjoin-set 33 root))
    (pre-order root))